.. _localizationInternationalization:

Localization / Internationalization
===================================

Synse Server supports localization/internationalization via Python's
`gettext <https://docs.python.org/3/library/gettext.html>`_ and
`Babel <http://babel.pocoo.org/en/latest/index.html>`_ libraries.

To see the supported language configurations, see the :ref:`configurationOptions` section.

The language can also be configured by setting the ``LANGUAGE`` environment variable, e.g.

.. code-block:: console

    $ docker run -d -p 5000:5000 -e LANGUAGE=en_US vaporio/synse-server

The translation files should be bundled with the Synse Server python package
via. it's ``setup.py`` configuration. While those files will be bundled automatically,
they are not generated or updated automatically. This is up to the developer and
translator.

There are generally two cases for handling translation files

- Creating a new translation
- Updating an existing translation


Creating a new translation
--------------------------
When a new translation is to be added to Synse Server, there are a few steps that
should occur. For these examples, we will assume that we are adding translations
for French, whose ``locale code`` is ``fr_FR``.

1. Make sure that the extracted localizable messages are up to date. To do this,
   the ``.pot`` file should be updated. This can be done via ``tox``

    .. code-block:: console

        $ tox -e i18n-extract

   Or via ``make``

    .. code-block:: console

        $ make i18n-extract

   Or, if you have Babel installed locally, directly via ``pybabel``

    .. code-block:: console

        $ pybabel extract \
            -o synse/locale/synse.pot \
            --project="Synse Server" \
            --copyright-holder="Vapor IO" \
            synse

2. Create a new translations catalog for the new translation language. This can
   be done via ``tox``

    .. code-block:: console

        $ tox -e i18n-init fr_FR

   Or, if you have Babel installed locally, directly via ``pybabel``

    .. code-block:: console

        $ pybabel init \
            -D synse \
            -i synse/locale/synse.pot \
            -d synse/locale \
            -l fr_FR


Updating an existing translation
--------------------------------
When updating an existing translation for Synse Server, there are a few steps that
should occur. For these examples, we will assume that the existing translation is
English, whose ``locale code`` is ``en_US``.

1. Make sure that the extracted localizable messages are up to date. To do this,
   the ``.pot`` file should be updated. This can be done via ``tox``

    .. code-block:: console

        $ tox -e i18n-extract

   Or via ``make``

    .. code-block:: console

        $ make i18n-extract

   Or, if you have Babel installed locally, directly via ``pybabel``

    .. code-block:: console

        $ pybabel extract \
            -o synse/locale/synse.pot \
            --project="Synse Server" \
            --copyright-holder="Vapor IO" \
            synse

2. Update the existing catalog using the up-to-date ``.pot`` file. This can be done
   via ``tox``

    .. code-block:: console

        $ tox -e i18n-update en_US

   Or via ``make`` (NOTE: currently, only ``en_US`` can be updated via make, since it
   is the default).

    .. code-block:: console

        $ make i18n-update

   Or, if you have Babel installed locally, directly via ``pybabel``

    .. code-block:: console

        $ pybabel update \
            -D synse \
            -i synse/locale/synse.pot \
            -d synse/locale \
            -l en_US


Compiling Translations
----------------------
Once all translations have been added or updated (and in version control) and before Synse
Server is distributed (whether via a Docker image build/release, or by other means), the
translations should be compiled. This can be done via ``tox``

.. code-block:: console

    $ tox -e i18n-compile

Or via ``make``

.. code-block:: console

    $ make i18n-compile

Or, if you have Babel installed locally, directly via ``pybabel``

.. code-block:: console

    $ pybabel compile \
        -D synse \
        -d synse/locale \
        --statistics
