#!/bin/bash
#
# synse-server
#
# This script is a startup script to run the default configuration
# of Synse Server. It is included in the synse-server package as a
# script, and is used as the entry point for the Synse Server Docker
# images.
#
# It can be used to start Synse Server as well as optionally starting
# an instance of a local emulator plugin alongside it, if the emulator
# binary is found.
#
# ---------------------------------------------------------------------
# Copyright (C) 2015-19  Vapor IO
#
# This file is part of Synse.
#
# Synse is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Synse is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Synse.  If not, see <http://www.gnu.org/licenses/>.
# ---------------------------------------------------------------------

set -o errexit -o pipefail

version="$(python -c "import synse_server ; print(synse_server.__version__)")"

# name: -h, --help
# desc: Print usage information
function -h {
cat <<USAGE
   __
  / _\_   _ _ __  ___  ___
  \ \| | | | '_ \/ __|/ _ \\
  _\ \ |_| | | | \__ \  __/
  \__/\__, |_| |_|___/\___| v${version}
      |___/

    Vapor IO

  Synse Server provides a simple API to monitor and control
  physical and virtual devices at any scale: from home automation
  to data center infrastructure. It exposes devices across
  numerous backend protocols, giving a uniform interface to
  read, write, and otherwise interact with devices.

  This command runs synse-server. Additional sub-commands may
  be specified to modify the runtime behavior.

  This command is used as the default entry point in the
  Synse Server Docker images, so all the flags and sub-commands
  defined here may be passed to the Docker image as well, e.g.

    docker run vaporio/synse-server [flag | sub-command]


  USAGE:
    synse-server [flag | sub-command]

  Flags:
    --help, -h     Print this help message.
    --version, -v  Print the version of synse-server.

  Sub-commands:
    enable-emulator
        Run the emulator plugin alongside synse-server to provide
        mock data. This can be useful for testing, development,
        and learning about synse-server. A default emulator config
        is provided. NOTE: This sub-command expects a particular
        file structure and is intended to be run inside a Docker
        container; use at your own risk.

USAGE
exit 0
};
function --help { -h ;}


# name: -v, --version
# desc: Print synse-server version information.
function -v {
    echo "${version}"
    exit 0
};
function --version { -v ;}


# name: enable-emulator
# desc: Start a local emulator plugin binary in the background.
#   The plugin is expected to be on the PATH and should be named
#   'synse-emulator'. This is done in the Dockerfile.
#
#   The following environment variables can be set to override
#   plugin configurations:
#
#     PLUGIN_DEVICE_CONFIG: The path to the overriding device configs
#     PLUGIN_CONFIG: The path to the overriding plugin config
#
function enable-emulator {
    if [[ "$(which synse-emulator)" ]]; then
        synse-emulator 1>&2 &
    else
        echo "synse-server can not find an emulator binary to run."
        echo "If using an official Docker image, ensure you are using"
        echo "a non-'slim' image tag. Ensure the emulator binary is"
        echo "named 'synse-emulator' and is on the PATH."
        exit 1
    fi
}


# if any arguments were passed in, act on them now.
for var in "$@"
do
    "$var"
done

# start synse
python -m synse_server