# Defaults for our CircleCI jobs.
defaults: &defaults
  working_directory: ~/synse-server
  docker:
    - image: circleci/python:3.6.5
  environment:
    IMAGE_NAME: "vaporio/synse-server"


# Common config for tag-triggered workflows
tag-filters: &tag-filters
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v?[0-9]*(\.[0-9]*)*(-(\S)*)?$/


# CircleCI Config
version: 2
jobs:

  # test
  #
  # This job is run for all commits. It makes sure that: the source code
  # is properly linted and tests pass.
  #
  # This job does not publish any build artifacts.
  test:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
            pip install tox>=2.9.0 codecov>=1.4.0
      - restore_cache:
          keys:
            - v1-test-{{ checksum "requirements.txt" }}-{{ checksum "tox.ini" }}
      - run:
          name: Unit Tests
          command: make test-unit
      - run:
          name: Unit Test Coverage
          command: codecov
      - run:
          name: Integration Tests
          command: make test-integration
      - save_cache:
          key: v1-test-{{ checksum "requirements.txt" }}-{{ checksum "tox.ini" }}
          paths:
            - .tox/py36
      - store_artifacts:
          path: ./results
      - store_test_results:
          path: ./results/pytest
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker Image
          command: make docker

  # lint
  #
  # This job runs linting on project source files.
  lint:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
            pip install tox>=2.9.0
      - restore_cache:
          keys:
            - v1-lint-{{ checksum "requirements.txt" }}-{{ checksum "tox.ini" }}
      - run:
          name: Lint
          command: make lint
      - save_cache:
          key: v1-lint-{{ checksum "requirements.txt" }}-{{ checksum "tox.ini" }}
          paths:
            - .tox/lint

  # publish-edge
  #
  # This job is run when a commit is made to the 'master' branch. This
  # includes commits directly to master and pull request merges. It builds
  # the Docker image for the repo and publishes it to DockerHub with the
  # 'edge' tag. This is effectively the 'daily/nightly' build.
  publish-edge:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Dependencies
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
            pip install tox>=2.9.0
      - run:
          name: Build and Publish Docker Images
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            ./bin/ci/build_and_publish.sh edge

  # publish-release
  #
  # This job is run when a tag is pushed to GitHub. Simultaneous to this, a
  # release will be drafted in the 'release' job. This will build the Docker
  # image for the repo and publishes it to DockerHub with the 'latest' tag
  # and the appropriate version tags.
  publish-release:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Dependencies
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
            pip install tox>=2.9.0
      - run:
          name: Check Version matches Tag
          command: make ci-check-version
      - run:
          name: Build and Publish Docker Images
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            ./bin/ci/build_and_publish.sh latest

  # package
  #
  # This job packages Synse Server into a distributable Python package.
  # These packages are used as build artifacts when generating releases.
  package:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
            pip install -r requirements.txt
      - run:
          name: Package
          command: make ci-package
      - persist_to_workspace:
          root: .
          paths:
            - dist

  # release
  #
  # This job creates a GitHub release draft for the tag that was pushed.
  # It generates a changelog for the release and attaches build artifacts
  # to the release as well. The release should be manually published on GitHub.
  release:
    working_directory: ~/synse-server
    docker:
      - image: circleci/golang:latest
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Check Version matches Tag
          command: make ci-check-version
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Generate Changelog
          command: |
            tag=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1` || true)
            since_tag=$(if [ "${tag}" ]; then echo "--since-tag ${tag}"; fi)

            docker pull timfallmk/github-changelog-generator
            docker run --name changelog timfallmk/github-changelog-generator \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -p ${CIRCLE_PROJECT_REPONAME} \
              -t ${GITHUB_TOKEN} \
              ${since_tag}
            docker cp changelog:/usr/local/src/your-app/CHANGELOG.md ./
      - run:
          name: Create Release
          command: |
            go get -v github.com/tcnksm/ghr
            if git describe --exact-match --tags HEAD; then
              CIRCLE_TAG=$(git describe --exact-match --tags HEAD)
            fi
            ghr \
              -u ${GITHUB_USER} \
              -t ${GITHUB_TOKEN} \
              -b "$(cat ./CHANGELOG.md)" \
              -replace \
              -draft \
              ${CIRCLE_TAG} /tmp/workspace/dist


workflows:
  version: 2
  build:
    jobs:
      - test
      - publish-edge:
          context: vapor-auto
          requires:
            - test
          filters:
            branches:
              only: master
      - package:
          <<: *tag-filters
      - release:
          context: vapor-auto
          <<: *tag-filters
          requires:
            - package
      - publish-release:
          context: vapor-auto
          <<: *tag-filters
          requires:
            - release
