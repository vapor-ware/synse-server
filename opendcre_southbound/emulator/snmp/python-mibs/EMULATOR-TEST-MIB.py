#
# PySNMP MIB module EMULATOR-TEST-MIB (http://pysnmp.sf.net)
# ASN.1 source file:///usr/share/snmp/mibs/EMULATOR-TEST-MIB.txt
# Produced by pysmi-0.0.7 at Thu Dec  1 13:25:31 2016
# On host elektrode platform Darwin version 16.1.0 by user mhink
# Using Python version 2.7.10 (default, Jul 30 2016, 18:31:42) 
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( sysName, sysLocation, sysContact, ) = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysLocation", "sysContact")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, enterprises, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
testEnterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 61439))
testDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6))
testDeviceMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6, 1))
testDeviceModules = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6, 2))
testDeviceProject = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6, 3))
testDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6, 4))
testDeviceComponents = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1))
testDeviceVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2))
testDeviceCustomDefines = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6, 5))
testDeviceCustomDefinedTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1))
testDeviceMibMajRev = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 1, 1), Integer32()).setMaxAccess("readonly")
testDeviceMibMinRev = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 1, 2), Integer32()).setMaxAccess("readonly")
testDeviceMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("configChanged", 5), ("timeout", 6),))).setMaxAccess("readonly")
testDeviceCoreState = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 2, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("failed", 1), ("ok", 2),))).setMaxAccess("readonly")
testDeviceCoreVersion = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,10))).setMaxAccess("readonly")
testDeviceProjectName = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,50))).setMaxAccess("readonly")
testDeviceProjectChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,24))).setMaxAccess("readonly")
testDeviceStatusAvailability = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4), ("timeout", 5),))).setMaxAccess("readonly")
testDeviceStatusCooling = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
testDeviceStatusPower = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
testDeviceStatusMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
testDeviceStatusSecurity = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
testDeviceStatusCapacity = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
testDeviceStatusRack = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
testDeviceNumberOfComponents = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
testDeviceComponentTable = MibTable((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2), )
testDeviceComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1), ).setIndexNames((0, "EMULATOR-TEST-MIB", "componentIndex"))
componentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
componentId = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
componentName = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,30))).setMaxAccess("readonly")
componentType = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("removed", 1), ("domain", 2), ("location", 3), ("building", 4), ("room", 5), ("rackrow", 6), ("rack", 7), ("device", 8), ("rackitem", 9),))).setMaxAccess("readonly")
componentParent = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
componentStatusTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4), ("timeout", 5),))).setMaxAccess("readonly")
componentStatusAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4), ("timeout", 5),))).setMaxAccess("readonly")
componentStatusCooling = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
componentStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
componentStatusMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
componentStatusSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
componentStatusCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
componentStatusRack = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("warning", 3), ("alarm", 4),))).setMaxAccess("readonly")
testDeviceNumberOfVariables = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 1), Integer32()).setMaxAccess("readonly")
testDeviceVariableTable = MibTable((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2), )
testDeviceVariableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1), ).setIndexNames((0, "EMULATOR-TEST-MIB", "variableIndex"))
variableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
variableId = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
variableName = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,30))).setMaxAccess("readonly")
variableMaintenanceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256,)).clone(namedValues=NamedValues(("undefined", 1), ("cooling", 2), ("power", 4), ("rack", 8), ("monitoring", 16), ("remoting", 32), ("availability", 64), ("security", 128), ("capacity", 256),))).setMaxAccess("readonly")
variableMeasurand = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 35, 36, 37,)).clone(namedValues=NamedValues(("undefined", 1), ("temperature", 2), ("current", 3), ("power", 4), ("effectivePower", 5), ("humidity", 6), ("voltage", 7), ("energy", 8), ("frequency", 9), ("access", 10), ("leakage", 11), ("percent", 12), ("rpm", 13), ("co2", 14), ("pue", 15), ("flow", 16), ("time", 17), ("costs", 18), ("imp", 19), ("heatCapacity", 20), ("constant", 21), ("temperatureDiff", 22), ("timespan", 23), ("cycles", 24), ("pulseRate", 34), ("pressure", 35), ("acceleration", 36), ("timeSpanTicks", 37),))).setMaxAccess("readonly")
variableParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
variableType = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("number", 1), ("string", 2), ("enum", 3),))).setMaxAccess("readonly")
variableQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("undefined", 1), ("good", 2), ("bad", 3),))).setMaxAccess("readonly")
variableValueInt = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
variableValueString = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,30))).setMaxAccess("readwrite")
variableValueUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,10))).setMaxAccess("readonly")
variableDivisor = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
variableMultiplicator = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 4, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
testDeviceNumberOfTraps = MibScalar((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
testDeviceCustomDefinedTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2), )
testDeviceCustomDefinedTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1), ).setIndexNames((0, "EMULATOR-TEST-MIB", "customDefinedTrapIndex"))
customDefinedTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
cdtMessageCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("na", 1), ("info", 2), ("warning", 3), ("error", 4), ("ok", 5),))).setMaxAccess("readonly")
cdtWorkflowId = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cdtWorkflowName = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cdtFlowElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,10))).setMaxAccess("readonly")
cdtMessageText = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cdtVariableId = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
cdtVariableName = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cdtVariableValue = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
cdtVariableTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cdtVariableOwnerId = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,2147483647))).setMaxAccess("readonly")
cdtVariableOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 61439, 6, 5, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
projectUpload = NotificationType((1, 3, 6, 1, 4, 1, 61439, 6) + (0,1)).setObjects(*(("EMULATOR-TEST-MIB", "sysName"), ("EMULATOR-TEST-MIB", "sysLocation"), ("EMULATOR-TEST-MIB", "sysContact"), ("EMULATOR-TEST-MIB", "testDeviceProjectName"), ("EMULATOR-TEST-MIB", "testDeviceProjectChangeTime"),))
customDefinedTrap = NotificationType((1, 3, 6, 1, 4, 1, 61439, 6) + (0,2)).setObjects(*(("EMULATOR-TEST-MIB", "cdtMessageCategory"), ("EMULATOR-TEST-MIB", "cdtWorkflowId"), ("EMULATOR-TEST-MIB", "cdtWorkflowName"), ("EMULATOR-TEST-MIB", "cdtMessageText"), ("EMULATOR-TEST-MIB", "cdtVariableId"), ("EMULATOR-TEST-MIB", "cdtVariableName"), ("EMULATOR-TEST-MIB", "cdtVariableValue"), ("EMULATOR-TEST-MIB", "cdtVariableTranslation"), ("EMULATOR-TEST-MIB", "cdtVariableOwnerId"), ("EMULATOR-TEST-MIB", "cdtVariableOwnerName"),))
mibBuilder.exportSymbols("EMULATOR-TEST-MIB", variableQuality=variableQuality, variableType=variableType, projectUpload=projectUpload, testDeviceModules=testDeviceModules, variableMeasurand=variableMeasurand, variableIndex=variableIndex, testDeviceCustomDefines=testDeviceCustomDefines, testDeviceCoreState=testDeviceCoreState, testDeviceVariableEntry=testDeviceVariableEntry, testDeviceCustomDefinedTraps=testDeviceCustomDefinedTraps, variableValueInt=variableValueInt, testDeviceComponentEntry=testDeviceComponentEntry, testDeviceMibCondition=testDeviceMibCondition, componentStatusCooling=componentStatusCooling, testDeviceMibMajRev=testDeviceMibMajRev, variableMultiplicator=variableMultiplicator, cdtVariableOwnerId=cdtVariableOwnerId, componentStatusMonitoring=componentStatusMonitoring, variableParentId=variableParentId, testDeviceStatusRack=testDeviceStatusRack, testDeviceStatusCooling=testDeviceStatusCooling, variableDivisor=variableDivisor, cdtVariableTranslation=cdtVariableTranslation, testDeviceStatusPower=testDeviceStatusPower, testDeviceStatusCapacity=testDeviceStatusCapacity, testDeviceVariableTable=testDeviceVariableTable, testDeviceStatusSecurity=testDeviceStatusSecurity, cdtMessageCategory=cdtMessageCategory, testDeviceCoreVersion=testDeviceCoreVersion, componentIndex=componentIndex, testDeviceComponents=testDeviceComponents, componentId=componentId, componentStatusPower=componentStatusPower, testDevice=testDevice, testDeviceStatusAvailability=testDeviceStatusAvailability, cdtVariableValue=cdtVariableValue, testDeviceVariables=testDeviceVariables, testDeviceNumberOfVariables=testDeviceNumberOfVariables, componentStatusCapacity=componentStatusCapacity, cdtWorkflowName=cdtWorkflowName, componentName=componentName, variableName=variableName, testDeviceMibMinRev=testDeviceMibMinRev, testDeviceProject=testDeviceProject, variableId=variableId, testDeviceProjectName=testDeviceProjectName, cdtVariableOwnerName=cdtVariableOwnerName, testDeviceProjectChangeTime=testDeviceProjectChangeTime, variableMaintenanceGroup=variableMaintenanceGroup, variableValueUnit=variableValueUnit, testDeviceMibRev=testDeviceMibRev, testDeviceComponentTable=testDeviceComponentTable, cdtFlowElementId=cdtFlowElementId, testDeviceCustomDefinedTrapsTable=testDeviceCustomDefinedTrapsTable, componentType=componentType, cdtMessageText=cdtMessageText, componentStatusAvailability=componentStatusAvailability, componentParent=componentParent, testDeviceStatusMonitoring=testDeviceStatusMonitoring, customDefinedTrap=customDefinedTrap, testDeviceNumberOfTraps=testDeviceNumberOfTraps, cdtWorkflowId=cdtWorkflowId, cdtVariableId=cdtVariableId, customDefinedTrapIndex=customDefinedTrapIndex, testDeviceStatus=testDeviceStatus, testEnterprise=testEnterprise, cdtVariableName=cdtVariableName, componentStatusRack=componentStatusRack, variableValueString=variableValueString, componentStatusSecurity=componentStatusSecurity, testDeviceCustomDefinedTrapsEntry=testDeviceCustomDefinedTrapsEntry, testDeviceNumberOfComponents=testDeviceNumberOfComponents, componentStatusTotal=componentStatusTotal)
