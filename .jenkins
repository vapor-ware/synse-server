pipeline {

  agent any

  environment {
    IMAGE_NAME = 'vaporio/synse-server'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Lint') {
      steps {
        sh 'tox -e lint'
      }
    }

    stage('Test') {
      environment {
        CODECOV_TOKEN = credentials('codecov-token')
      }
      steps {
        sh 'tox tests/unit'
        sh 'codecov'
      }
    }

    stage('Verify Image Build') {
      steps {
        sh '''
          docker build \
            --label build_date=$(date -u +%Y-%m-%dT%T 2> /dev/null) \
            --label version=$(python setup.py --version) \
            --label commit=$(git rev-parse --short HEAD 2> /dev/null || true) \
             -t ${IMAGE_NAME}:canary .
        '''
      }
    }

    stage('Publish "latest" Image (master)') {
      when {
        branch 'master'
      }
      steps {
        withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
          sh '''
            docker build \
              --label build_date=$(date -u +%Y-%m-%dT%T 2> /dev/null) \
              --label version=$(python setup.py --version) \
              --label commit=$(git rev-parse --short HEAD 2> /dev/null || true) \
              -t ${IMAGE_NAME}:latest .
          '''
        }
      }
    }

    stage('Draft GitHub Release') {
      when {
        // example matches: v1.2.3, v1.2.3-dev
        tag pattern: '^v(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      environment {
        GITHUB_USER = 'vapor-ware'
        GITHUB_TOKEN = credentials('vio-bot-gh-token')
        GITHUB_REPONAME = 'synse-server'
      }
      steps {
        // Build package distribution
        sh 'python setup.py sdist --formats=gztar,zip'

        // Auto-generate a changelog for the release
        sh './bin/ci/generate_changelog.sh'

        // Create the release
        sh 'docker pull edaniszewski/ghr'
        sh 'docker run --rm -v $PWD:/repo edaniszewski/ghr -u ${GITHUB_USER} -r ${GITHUB_REPONAME} -t ${GITHUB_TOKEN} -b "$(cat ./CHANGELOG.md)" -replace -draft ${TAG_NAME} dist'
      }
    }

    stage('Publish Release Images') {
      when {
        // example matches: v1.2.3, v1.2.3-dev
        tag pattern: '^v(0|[1-9]*)\\.(0|[1-9]*)\\.(0|[1-9]*)(-(\\S*))?$', comparator: "REGEXP"
      }
      steps {
        withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
          sh './bin/ci/build_and_publish.sh latest'
        }
      }
    }

  }
}
